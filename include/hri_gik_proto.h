/*
 * Copyright (c) 2001-2014 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                  
 *
 * Sim√©on, T., Laumond, J. P., & Lamiraux, F. (2001). 
 * Move3d: A generic platform for path planning. In in 4th Int. Symp.
 * on Assembly and Task Planning.
 */
/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.
 *
 *   Created: Tue May 27 14:48:29 2008
 */
#ifndef __CEXTRACT__
extern void hri_gik_set_visstep(int step);
extern hri_gik * hri_gik_create_gik ( void );
extern hri_gik_task * hri_gik_create_task ( void );
extern int hri_gik_destroy_gik_data ( hri_gik * gik );
extern int hri_gik_initialize_gik ( hri_gik * gik, p3d_rob * robot, int total_joint_no );
extern int hri_gik_add_task ( hri_gik * gik, int m, int n, int priority, int * jindexes, int eef_no );
extern int hri_gik_initialize_task ( hri_gik * gik, hri_gik_task * task, int m, int n, int priority, int * jindexes, int eef_no );
extern int hri_gik_destroy_task ( hri_gik_task * task );
extern int hri_gik_destroy_gik ( hri_gik * gik );
extern int hri_gik_uninitialize_gik(hri_gik * gik);
extern int hri_gik_computeJacobian ( hri_gik * gik, int task_no, int rotation );
extern int hri_gik_computePsInvJacobian ( hri_gik * gik, int task_no );
extern void hri_gik_ShowTheMatrix ( gsl_matrix * M );
extern void hri_gik_ShowTheVector ( gsl_vector * V );
extern int hri_gik_take_goal ( hri_gik * gik, int task_no );
extern int hri_gik_updaterobot ( hri_gik * gik, gsl_vector * DT );
extern int hri_gik_compute_DX ( hri_gik * gik, int task_no );
extern int hri_gik_compute_core ( hri_gik * gik, gsl_vector * DT_final );
extern int hri_gik_free_joints ( hri_gik * gik );
extern int hri_gik_compute ( p3d_rob * robot, hri_gik * gik, int step, double reach, p3d_vector3* goalCoord, configPt * qresult, int (*fct)(void) );
extern double hri_gik_remainingdistance ( hri_gik * gik, int task_no );
extern int hri_gik_compute_sdls(hri_gik * gik, gsl_vector * DT_final);
extern int hri_gik_sdls ( p3d_rob * robot, hri_gik * gik, int step, double reach, p3d_vector3* goalCoord, configPt * qresult, int (*fct)(void) );

#endif /* __CEXTRACT__ */
